Index: app/src/main/java/com/group25/ecommercefashionapp/data/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group25.ecommercefashionapp.data;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Product extends Item {\n    private final int id;\n    private final String description;\n    private final Integer price;\n    private final int imageId;\n    private final String category;\n    private final Integer availableQuantity;\n    private final List<ProductColor> colorList = new ArrayList<>();\n    private final List<ProductSize> sizeList = new ArrayList<>();\n\n    public Product(Integer id, String name, String description, Integer price, int imageId, String category, Integer availableQuantity) {\n        super(name);\n        this.id = id;\n        this.description = description;\n        this.price = price;\n        this.imageId = imageId;\n        this.category = category;\n        this.availableQuantity = availableQuantity;\n    }\n\n    public Product(String description, Integer price, int imageId, String category) {\n        super(\"\");\n        this.description = description;\n        this.price = price;\n        this.imageId = imageId;\n        this.id = -1;\n        this.category = category;\n        this.availableQuantity = 0;\n\n    }\n\n    public Product(String name, String description, Integer price, int imageId, String category) {\n        super(name);\n        this.description = description;\n        this.price = price;\n        this.imageId = imageId;\n        this.id = -1;\n        this.category = category;\n        this.availableQuantity = 0;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public Integer getPrice() {\n        return price;\n    }\n\n    public Integer getImage() {\n        return imageId;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    public Integer getAvailableQuantity() {\n        return availableQuantity;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public List<String> getColors() {\n        List<String> colors = new ArrayList<>();\n        for (ProductColor color : colorList) {\n            colors.add(color.getHexColor());\n        }\n        return colors;\n    }\n\n    public List<ProductColor> getColorList() {\n        return colorList;\n    }\n\n    public void addColor(ProductColor color) {\n        colorList.add(color);\n    }\n\n    public void addColors(List<ProductColor> colors) {\n        colorList.addAll(colors);\n    }\n\n    public List<ProductSize> getSizeList() {\n        return sizeList;\n    }\n\n    public List<String> getSizes() {\n        List<String> sizes = new ArrayList<>();\n        for (ProductSize size : sizeList) {\n            sizes.add(size.getName());\n        }\n        return sizes;\n    }\n\n    public void addSize(ProductSize size) {\n        sizeList.add(size);\n    }\n\n    public void addSizes(List<ProductSize> sizes) {\n        sizeList.addAll(sizes);\n    }\n\n    @Override\n    public boolean equals(Object object){\n        if (this == object) return true;\n        if (object == null || getClass() != object.getClass()) return false;\n        Product product = (Product) object;\n        return id == product.id;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group25/ecommercefashionapp/data/Product.java b/app/src/main/java/com/group25/ecommercefashionapp/data/Product.java
--- a/app/src/main/java/com/group25/ecommercefashionapp/data/Product.java	(revision daaea6cf27461a3157dea6ef27b80332bc0eb4b6)
+++ b/app/src/main/java/com/group25/ecommercefashionapp/data/Product.java	(date 1702285164839)
@@ -120,4 +120,14 @@
         Product product = (Product) object;
         return id == product.id;
     }
+    public String getSizeRange() {
+        String sizeRange = "";
+        if (sizeList.size() > 0) {
+            sizeRange = sizeList.get(0).getName();
+            if (sizeList.size() > 1) {
+                sizeRange += " - " + sizeList.get(sizeList.size() - 1).getName();
+            }
+        }
+        return sizeRange;
+    }
 }
Index: app/src/main/java/com/group25/ecommercefashionapp/repository/ProductRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group25.ecommercefashionapp.repository;\n\nimport android.content.ContentValues;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\n\nimport com.group25.ecommercefashionapp.data.ProductSize;\nimport com.group25.ecommercefashionapp.utilities.ColorUtils;\nimport com.group25.ecommercefashionapp.R;\nimport com.group25.ecommercefashionapp.data.CategoryItem;\nimport com.group25.ecommercefashionapp.data.Product;\nimport com.group25.ecommercefashionapp.data.ProductColor;\nimport com.group25.ecommercefashionapp.database.ProductContract;\nimport com.group25.ecommercefashionapp.database.DatabaseHelper;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ProductRepository {\n    private SQLiteDatabase db;\n    private final DatabaseHelper productDbHelper;\n\n    public ProductRepository(DatabaseHelper dbHelper) {\n        this.db = dbHelper.getWritableDatabase();\n        this.productDbHelper = dbHelper;\n    }\n\n    public void insertProductData(Product product) {\n        ContentValues values = new ContentValues();\n        values.put(ProductContract.ProductEntry.COLUMN_NAME, product.getName());\n        values.put(ProductContract.ProductEntry.COLUMN_DESCRIPTION, product.getDescription());\n        values.put(ProductContract.ProductEntry.COLUMN_PRICE, product.getPrice());\n        values.put(ProductContract.ProductEntry.COLUMN_IMAGE, product.getImage());\n        values.put(ProductContract.ProductEntry.COLUMN_CATEGORY, product.getCategory());\n        values.put(ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY, product.getAvailableQuantity());\n\n        long productId = db.insert(ProductContract.ProductEntry.TABLE_NAME, null, values);\n\n    }\n\n    public void insertProductColorData(ProductColor color) {\n        ContentValues values = new ContentValues();\n        values.put(ProductContract.ColorEntry.COLUMN_PRODUCT_ID, color.getProduct_id());\n        values.put(ProductContract.ColorEntry.COLUMN_HEX_COLOR, color.getHexColor());\n\n        long colorId = db.insert(ProductContract.ColorEntry.TABLE_NAME, null, values);\n    }\n    public void insertProductSizeData(ProductSize size) {\n        ContentValues values = new ContentValues();\n        values.put(ProductContract.SizeEntry.COLUMN_PRODUCT_ID, size.getProduct_id());\n        values.put(ProductContract.SizeEntry.COLUMN_SIZE, size.getName());\n        long sizeId = db.insert(ProductContract.SizeEntry.TABLE_NAME, null, values);\n    }\n\n    public ArrayList<Product> getAllProducts() {\n        ArrayList<Product> products = new ArrayList<>();\n        Cursor cursor = db.query(ProductContract.ProductEntry.TABLE_NAME, null, null, null, null, null, null\n\n        );\n        int idIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_ID);\n        int nameIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_NAME);\n        int descriptionIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_DESCRIPTION);\n        int priceIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_PRICE);\n        int imageIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_IMAGE);\n        int categoryIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_CATEGORY);\n        int availableQuantityIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY);\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            int productId = cursor.getInt(idIndex);\n            String productName = cursor.getString(nameIndex);\n            String productDescription = cursor.getString(descriptionIndex);\n            Integer productPrice = cursor.getInt(priceIndex);\n            int productImage = cursor.getInt(imageIndex);\n            String productCategory = cursor.getString(categoryIndex);\n            Integer productQuantity = cursor.getInt(availableQuantityIndex);\n\n            List<ProductColor> colors = getColorsForProduct(productId);\n            List<ProductSize> sizes = getSizesForProduct(productId);\n            Product product = new Product(productId, productName, productDescription, productPrice, productImage, productCategory, productQuantity);\n            product.addColors(colors);\n            product.addSizes(sizes);\n            products.add(product);\n\n            cursor.moveToNext();\n        }\n\n        cursor.close();\n        return products;\n    }\n\n    private void deleteAllProducts() {\n        db.delete(ProductContract.ProductEntry.TABLE_NAME, null, null);\n    }\n\n    public void dropProductTable() {\n        try {\n            db.execSQL(\"DROP TABLE IF EXISTS \" + ProductContract.ProductEntry.TABLE_NAME);\n            db.execSQL(\"DROP TABLE IF EXISTS \" + ProductContract.ColorEntry.TABLE_NAME);\n            db.execSQL(\"DROP TABLE IF EXISTS \" + ProductContract.SizeEntry.TABLE_NAME);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    public void insertDbData() {\n        db.beginTransaction();\n        try {\n            productDbHelper.onCreate(db);\n            insertProductData(new Product(\"Beige Shirt\", \"Linen cotton fabric keep you warm through out the year.\", 1500000, R.drawable.man_beige_shirt_pants_casual_wear_fashion, \"√Åo thun\"));\n            insertProductData(new Product(\"Beige Shirt\", \"Linen cotton fabric keep you warm through out the year.\", 510000, R.drawable.man_beige_shirt_pants_casual_wear_fashion, \"√Åo thun\"));\n            insertProductData(new Product(\"Beige Shirt\", \"Linen cotton fabric keep you warm through out the year.\", 750000, R.drawable.man_beige_shirt_pants_casual_wear_fashion, \"√Åo thun\"));\n            insertProductData(new Product(\"V√°y\", \"ƒê√¢y l√† s·∫£n ph·∫©m 4 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 800000, R.drawable.skirt, \"V√°y\"));\n            insertProductData(new Product(\"Beige Shirt\", \"Linen cotton fabric keep you warm through out the year.\", 500000, R.drawable.man_beige_shirt_pants_casual_wear_fashion, \"√Åo thun\"));\n            insertProductData(new Product(\"Qu·∫ßn\", \"ƒê√¢y l√† s·∫£n ph·∫©m 6 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 300000, R.drawable.jeans, \"Qu·∫ßn\"));\n            insertProductData(new Product(\"Qu·∫ßn\", \"ƒê√¢y l√† s·∫£n ph·∫©m 7 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 300000, R.drawable.jeans, \"Qu·∫ßn\"));\n            insertProductData(new Product(\"Gi√†y\", \"ƒê√¢y l√† s·∫£n ph·∫©m 8 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 300000, R.drawable.sneakers, \"Gi√†y\"));\n            insertProductData(new Product(\"B√≥p\", \"ƒê√¢y l√† s·∫£n ph·∫©m 9 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 300000, R.drawable.wallet, \"B√≥p\"));\n            insertProductData(new Product(\"√Åo kho√°c\", \"ƒê√¢y l√† s·∫£n ph·∫©m 10 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 200000, R.drawable.jacket, \"√Åo kho√°c\"));\n            insertProductData(new Product(\"√Åo kho√°c\", \"ƒê√¢y l√† s·∫£n ph·∫©m 11 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 200000, R.drawable.jacket, \"√Åo kho√°c\"));\n            insertProductData(new Product(\"Hoodie\", \"ƒê√¢y l√† s·∫£n ph·∫©m 12 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 100000, R.drawable.hoodie, \"Hoodie\"));\n            insertProductData(new Product(\"Hoodie\", \"ƒê√¢y l√† s·∫£n ph·∫©m 13 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 100000, R.drawable.hoodie, \"Hoodie\"));\n            insertProductData(new Product(\"T√∫i x√°ch\", \"ƒê√¢y l√† s·∫£n ph·∫©m 14 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 860000, R.drawable.handbag, \"T√∫i x√°ch\"));\n            insertProductData(new Product(\"√Åo thun\", \"ƒê√¢y l√† s·∫£n ph·∫©m 15 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 350000, R.drawable.tshirt, \"√Åo thun\"));\n            insertProductData(new Product(\"√Åo thun\", \"ƒê√¢y l√† s·∫£n ph·∫©m 16 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 4600000, R.drawable.tshirt, \"√Åo thun\"));\n            insertProductData(new Product(\"ƒê·ªìng h·ªì\", \"ƒê√¢y l√† s·∫£n ph·∫©m 17 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 4600000, R.drawable.watch, \"ƒê·ªìng h·ªì\"));\n            insertProductData(new Product(\"T√∫i x√°ch\", \"ƒê√¢y l√† s·∫£n ph·∫©m 18 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 8700000, R.drawable.handbag, \"T√∫i x√°ch\"));\n            insertProductData(new Product(\"√Åo kho√°c\", \"ƒê√¢y l√† s·∫£n ph·∫©m 19 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 8700000, R.drawable.handbag, \"T√∫i x√°ch\"));\n            insertProductData(new Product(\"√Åo thun\", \"ƒê√¢y l√† s·∫£n ph·∫©m 20 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 8800000, R.drawable.tshirt, \"√Åo thun\"));\n            insertProductData(new Product(\"√Åo thun\", \"ƒê√¢y l√† s·∫£n ph·∫©m 21 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 1200000, R.drawable.tshirt, \"√Åo thun\"));\n            insertProductData(new Product(\"√Åo thun\", \"ƒê√¢y l√† s·∫£n ph·∫©m 22 c√≥ nhi·ªÅu l∆∞·ª£t b√°n nh·∫•t\", 3400000, R.drawable.tshirt, \"√Åo thun\"));\n\n\n            randomInsertProductColorData();\n            randomInsertProductSizeData();\n            db.setTransactionSuccessful();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            db.endTransaction();\n        }\n    }\n\n    private void randomInsertProductColorData() {\n        db.beginTransaction();\n        try {\n            List<Product> products = getAllProducts();\n            for (Product product : products) {\n                int colorCount = new Random().nextInt(8) + 1;\n                while (colorCount > 0) {\n                    String hexColor = generateRandomHexColor();\n                    String colorName = ColorUtils.getColorNameFromHex(hexColorToInteger(hexColor));\n                    insertProductColorData(new ProductColor(product.getId(), hexColor, colorName));\n                    colorCount--;\n                }\n            }\n            db.setTransactionSuccessful();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            db.endTransaction();\n        }\n    }\n    private void randomInsertProductSizeData() {\n        db.beginTransaction();\n        try {\n            List<Product> products = getAllProducts();\n            for (Product product : products) {\n                int sizeCount = new Random().nextInt(5) + 1;\n                while (sizeCount > 0) {\n                    String size = generateRandomSize();\n                    insertProductSizeData(new ProductSize(size, product.getId()));\n                    sizeCount--;\n                }\n            }\n            db.setTransactionSuccessful();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        } finally {\n            db.endTransaction();\n        }\n    }\n\n    private static String generateRandomSize() {\n        Random random = new Random();\n\n        // Define an array of size labels\n        String[] sizes = {\"XXL\", \"XL\", \"L\", \"M\", \"S\", \"XS\"};\n\n        // Generate a random index to select a size label from the array\n        int index = random.nextInt(sizes.length);\n\n        // Get the random size label\n        String randomSize = sizes[index];\n\n        return randomSize;\n    }\n\n    private int hexColorToInteger(String hexColor) {\n        return Integer.parseInt(hexColor.substring(1), 16);\n    }\n    private static String generateRandomHexColor() {\n        Random random = new Random();\n\n        // Generate random RGB values\n        int red = random.nextInt(256);\n        int green = random.nextInt(256);\n        int blue = random.nextInt(256);\n\n        // Convert RGB to hex\n        String hexColor = String.format(\"#%02X%02X%02X\", red, green, blue);\n\n        return hexColor;\n    }\n\n\n    public ArrayList<Product> getProductsByCategory(String category) {\n        ArrayList<Product> products = new ArrayList<>();\n\n        db = productDbHelper.getReadableDatabase();\n        String[] projection = {ProductContract.ProductEntry.COLUMN_ID, ProductContract.ProductEntry.COLUMN_NAME, ProductContract.ProductEntry.COLUMN_DESCRIPTION, ProductContract.ProductEntry.COLUMN_PRICE, ProductContract.ProductEntry.COLUMN_IMAGE, ProductContract.ProductEntry.COLUMN_CATEGORY, ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY};\n\n        String selection = ProductContract.ProductEntry.COLUMN_CATEGORY + \" = ?\";\n        String[] selectionArgs = {category};\n\n        Cursor cursor = db.query(ProductContract.ProductEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, null);\n\n        int idIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_ID);\n        int nameIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_NAME);\n        int descriptionIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_DESCRIPTION);\n        int priceIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_PRICE);\n        int imageIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_IMAGE);\n        int categoryIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_CATEGORY);\n        int availableQuantityIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY);\n\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            int productId = cursor.getInt(idIndex);\n            String productName = cursor.getString(nameIndex);\n            String productDescription = cursor.getString(descriptionIndex);\n            int productPrice = cursor.getInt(priceIndex);\n            int productImage = cursor.getInt(imageIndex);\n            String productCategory = cursor.getString(categoryIndex);\n            int productQuantity = cursor.getInt(availableQuantityIndex);\n\n            List<ProductColor> colors = getColorsForProduct(productId);\n            List<ProductSize> sizes = getSizesForProduct(productId);\n            Product product = new Product(productId, productName, productDescription, productPrice, productImage, productCategory, productQuantity);\n            product.addColors(colors);\n            product.addSizes(sizes);\n\n            products.add(product);\n\n            cursor.moveToNext();\n        }\n\n        cursor.close();\n        return products;\n    }\n\n    public Product getProductById(int id) {\n        Product product = null;\n\n        db = productDbHelper.getReadableDatabase();\n        String[] projection = {ProductContract.ProductEntry.COLUMN_ID, ProductContract.ProductEntry.COLUMN_NAME, ProductContract.ProductEntry.COLUMN_DESCRIPTION, ProductContract.ProductEntry.COLUMN_PRICE, ProductContract.ProductEntry.COLUMN_IMAGE, ProductContract.ProductEntry.COLUMN_CATEGORY, ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY};\n\n        String selection = ProductContract.ProductEntry.COLUMN_ID + \" = ?\";\n        String[] selectionArgs = {String.valueOf(id)};\n\n        Cursor cursor = db.query(ProductContract.ProductEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, null);\n\n        int idIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_ID);\n        int nameIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_NAME);\n        int descriptionIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_DESCRIPTION);\n        int priceIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_PRICE);\n        int imageIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_IMAGE);\n        int categoryIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_CATEGORY);\n        int availableQuantityIndex = cursor.getColumnIndex(ProductContract.ProductEntry.COLUMN_AVAILABLE_QUANTITY);\n\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()) {\n            int productId = cursor.getInt(idIndex);\n            String productName = cursor.getString(nameIndex);\n            String productDescription = cursor.getString(descriptionIndex);\n            int productPrice = cursor.getInt(priceIndex);\n            int productImage = cursor.getInt(imageIndex);\n            String productCategory = cursor.getString(categoryIndex);\n            int productQuantity = cursor.getInt(availableQuantityIndex);\n\n            List<ProductColor> colors = getColorsForProduct(productId);\n            List<ProductSize> sizes = getSizesForProduct(productId);\n            product = new Product(productId, productName, productDescription, productPrice, productImage, productCategory, productQuantity);\n            product.addColors(colors);\n            product.addSizes(sizes);\n\n            cursor.moveToNext();\n        }\n\n        cursor.close();\n        return product;\n    }\n\n    public ArrayList<CategoryItem> getCategories() {\n        ArrayList<CategoryItem> items = new ArrayList<>();\n        items.add(new CategoryItem(\"√Åo thun\", R.drawable.tshirt));\n        items.add(new CategoryItem(\"V√°y\", R.drawable.skirt));\n        items.add(new CategoryItem(\"Qu·∫ßn\", R.drawable.jeans));\n        items.add(new CategoryItem(\"√Åo kho√°c\", R.drawable.jacket));\n        items.add(new CategoryItem(\"Hoodie\", R.drawable.hoodie));\n        items.add(new CategoryItem(\"Gi√†y\", R.drawable.sneakers));\n        items.add(new CategoryItem(\"ƒê·ªìng h·ªì\", R.drawable.watch));\n        items.add(new CategoryItem(\"B√≥p\", R.drawable.wallet));\n        items.add(new CategoryItem(\"T√∫i x√°ch\", R.drawable.handbag));\n        return items;\n    }\n\n    private List<ProductColor> getColorsForProduct(int productId) {\n        List<ProductColor> colors = new ArrayList<>();\n        String[] colorProjection = {ProductContract.ColorEntry.COLUMN_HEX_COLOR};\n\n        String colorSelection = ProductContract.ColorEntry.COLUMN_PRODUCT_ID + \" = ?\";\n        String[] colorSelectionArgs = {String.valueOf(productId)};\n\n        Cursor colorCursor = db.query(ProductContract.ColorEntry.TABLE_NAME, colorProjection, colorSelection, colorSelectionArgs, null, null, null);\n\n        int colorHexIndex = colorCursor.getColumnIndex(ProductContract.ColorEntry.COLUMN_HEX_COLOR);\n\n        colorCursor.moveToFirst();\n        while (!colorCursor.isAfterLast()) {\n            String colorHex = colorCursor.getString(colorHexIndex);\n            String colorName = ColorUtils.getColorNameFromHex(hexColorToInteger(colorHex));\n            ProductColor color = new ProductColor(productId, colorHex, colorName);\n            colors.add(color);\n\n            colorCursor.moveToNext();\n        }\n\n        colorCursor.close();\n        return colors;\n    }\n\n    private List<ProductSize> getSizesForProduct(int productId) {\n        List<ProductSize> sizes = new ArrayList<>();\n        String[] sizeProjection = {ProductContract.SizeEntry.COLUMN_SIZE};\n\n        String sizeSelection = ProductContract.SizeEntry.COLUMN_PRODUCT_ID + \" = ?\";\n        String[] sizeSelectionArgs = {String.valueOf(productId)};\n\n        Cursor sizeCursor = db.query(ProductContract.SizeEntry.TABLE_NAME, sizeProjection, sizeSelection, sizeSelectionArgs, null, null, null);\n\n        int sizeNameIndex = sizeCursor.getColumnIndex(ProductContract.SizeEntry.COLUMN_SIZE);\n\n        sizeCursor.moveToFirst();\n        while (!sizeCursor.isAfterLast()) {\n            String sizeName = sizeCursor.getString(sizeNameIndex);\n            ProductSize size = new ProductSize(sizeName, productId);\n            sizes.add(size);\n\n            sizeCursor.moveToNext();\n        }\n\n        sizeCursor.close();\n        return sizes;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group25/ecommercefashionapp/repository/ProductRepository.java b/app/src/main/java/com/group25/ecommercefashionapp/repository/ProductRepository.java
--- a/app/src/main/java/com/group25/ecommercefashionapp/repository/ProductRepository.java	(revision daaea6cf27461a3157dea6ef27b80332bc0eb4b6)
+++ b/app/src/main/java/com/group25/ecommercefashionapp/repository/ProductRepository.java	(date 1702285164832)
@@ -198,6 +198,18 @@
         return randomSize;
     }
 
+    private static List<ProductSize> sortSizes(List<ProductSize> sizes) {
+        List<ProductSize> sortedSizes = new ArrayList<>();
+        for (String size : new String[]{"XS", "S", "M", "L", "XL", "XXL"}) {
+            for (ProductSize productSize : sizes) {
+                if (productSize.getName().equals(size)) {
+                    sortedSizes.add(productSize);
+                }
+            }
+        }
+        return sortedSizes;
+    }
+
     private int hexColorToInteger(String hexColor) {
         return Integer.parseInt(hexColor.substring(1), 16);
     }
@@ -249,7 +261,7 @@
             List<ProductSize> sizes = getSizesForProduct(productId);
             Product product = new Product(productId, productName, productDescription, productPrice, productImage, productCategory, productQuantity);
             product.addColors(colors);
-            product.addSizes(sizes);
+            product.addSizes(sortSizes(sizes));
 
             products.add(product);
 
@@ -293,7 +305,7 @@
             List<ProductSize> sizes = getSizesForProduct(productId);
             product = new Product(productId, productName, productDescription, productPrice, productImage, productCategory, productQuantity);
             product.addColors(colors);
-            product.addSizes(sizes);
+            product.addSizes(sortSizes(sizes));
 
             cursor.moveToNext();
         }
Index: app/src/main/java/com/group25/ecommercefashionapp/adapter/ProductItemAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group25.ecommercefashionapp.adapter;\n\nimport static com.group25.ecommercefashionapp.MyApp.getMainActivityInstance;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.cardview.widget.CardView;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.group25.ecommercefashionapp.ui.widget.ChipImagesView;\nimport com.group25.ecommercefashionapp.OnItemClickListener;\nimport com.group25.ecommercefashionapp.R;\nimport com.group25.ecommercefashionapp.ui.widget.FavoriteCheckBox;\nimport com.group25.ecommercefashionapp.data.Product;\n\nimport java.util.List;\n\npublic class ProductItemAdapter extends RecyclerView.Adapter<ProductItemAdapter.ViewHolder> {\n    private final List<Product> items;\n    private final OnItemClickListener clickListener;\n\n    public ProductItemAdapter(List<Product> items, OnItemClickListener clickListener) {\n        this.items = items;\n        this.clickListener = clickListener;\n    }\n\n    @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.cell_product, parent, false);\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        Product item = items.get(position);\n\n        // Bind your data to the UI components of the CardView\n        holder.txtDescription.setText(item.getDescription());\n        holder.txtPrice.setText(String.format(\"%,d\", item.getPrice()));\n        holder.img.setImageResource(item.getImage());\n\n        // Set click listener on the card\n        holder.cardView.setOnClickListener(v -> clickListener.onItemClick(v, item));\n        for(Product product : getMainActivityInstance().user.getFavoriteList()) {\n            if(product.getId() == item.getId()) {\n                holder.favoriteCheckBox.setChecked(true);\n                break;\n            }\n        }\n        holder.favoriteCheckBox.setOnClickListener(v -> {\n            if (holder.favoriteCheckBox.isChecked()) {\n                getMainActivityInstance().user.addFavorite(item);\n            } else {\n                getMainActivityInstance().user.removeFavorite(item);\n            }\n        });\n        holder.chipImagesView.setChipImages(item.getColors());\n    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder {\n        ImageView img;\n        TextView txtDescription;\n        TextView txtPrice;\n        CardView cardView;\n        FavoriteCheckBox favoriteCheckBox;\n        ChipImagesView chipImagesView;\n\n        public ViewHolder(View view) {\n            super(view);\n            img = view.findViewById(R.id.product_imageView);\n            txtDescription = view.findViewById(R.id.productName);\n            txtPrice = view.findViewById(R.id.price_view);\n            cardView = view.findViewById(R.id.productCardView);\n            chipImagesView = view.findViewById(R.id.chip_imagesView);\n            favoriteCheckBox = view.findViewById(R.id.favorite_checkBox);\n        }\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group25/ecommercefashionapp/adapter/ProductItemAdapter.java b/app/src/main/java/com/group25/ecommercefashionapp/adapter/ProductItemAdapter.java
--- a/app/src/main/java/com/group25/ecommercefashionapp/adapter/ProductItemAdapter.java	(revision daaea6cf27461a3157dea6ef27b80332bc0eb4b6)
+++ b/app/src/main/java/com/group25/ecommercefashionapp/adapter/ProductItemAdapter.java	(date 1702285164835)
@@ -41,9 +41,10 @@
         Product item = items.get(position);
 
         // Bind your data to the UI components of the CardView
-        holder.txtDescription.setText(item.getDescription());
+        holder.txtName.setText(item.getName());
         holder.txtPrice.setText(String.format("%,d", item.getPrice()));
         holder.img.setImageResource(item.getImage());
+        holder.txtSizeRange.setText(item.getSizeRange());
 
         // Set click listener on the card
         holder.cardView.setOnClickListener(v -> clickListener.onItemClick(v, item));
@@ -65,8 +66,7 @@
 
     public static class ViewHolder extends RecyclerView.ViewHolder {
         ImageView img;
-        TextView txtDescription;
-        TextView txtPrice;
+        TextView txtName, txtSizeRange, txtPrice;
         CardView cardView;
         FavoriteCheckBox favoriteCheckBox;
         ChipImagesView chipImagesView;
@@ -74,7 +74,8 @@
         public ViewHolder(View view) {
             super(view);
             img = view.findViewById(R.id.product_imageView);
-            txtDescription = view.findViewById(R.id.productName);
+            txtName = view.findViewById(R.id.productName);
+            txtSizeRange = view.findViewById(R.id.product_size_range);
             txtPrice = view.findViewById(R.id.price_view);
             cardView = view.findViewById(R.id.productCardView);
             chipImagesView = view.findViewById(R.id.chip_imagesView);
